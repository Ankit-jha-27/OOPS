class Ping extends Thread {
    public void run() {
        while (true) {
            System.out.println("Ping");
            try {
                 Thread.sleep(1000); 
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
    }
}

class Pong extends Thread {
    public void run() {
        while (true) {
            System.out.println("PONG");
            try { 
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
    }
}

public class PingPong {
    public static void main(String[] args) {
        new Ping().start();
        new Pong().start();
    }
}



// ..........................................................

class TableGenerator extends Thread {
    private int number;

    public TableGenerator(int number) {
        this.number = number;
    }

    public void run() {
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " x " + i + " = " + (number * i));
            try { 
                Thread.sleep(500); 
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
    }
}

public class TableThread {
    public static void main(String[] args) {
        TableGenerator t5 = new TableGenerator(5);
        TableGenerator t7 = new TableGenerator(7);

        t5.start();
        try {
            t5.join(); 
        } catch (InterruptedException e) {
            System.out.println(e);
        }

        t7.start();
        try {
            t7.join(); 
        } catch (InterruptedException e) {
            System.out.println(e);
        }
        
        System.out.println("Both tables printed successfully!");
    }
}

// .................................................................................

class SharedResource {
    private int data;
    private boolean available = false;

    public synchronized void produce(int value) {
        while (available) {
            try {
                wait(); 
            } catch (InterruptedException e) {}
        }
        data = value;
        available = true;
        System.out.println("Produced: " + value);
        notify();
    }

    public synchronized int consume() {
        while (!available) {
            try { 
                wait(); 
            } catch (InterruptedException e) {}
        }
        available = false;
        System.out.println("Consumed: " + data);
        notify();
        return data;
    }
}

class Producer extends Thread {
    private SharedResource resource;

    public Producer(SharedResource resource) {
        this.resource = resource;
    }

    public void run() {
        int value = 0;
        while (true) {
            resource.produce(value++);
            try { 
                Thread.sleep(1000);
            } catch (InterruptedException e) {}
        }
    }
}

class Consumer extends Thread {
    private SharedResource resource;

    public Consumer(SharedResource resource) {
        this.resource = resource;
    }

    public void run() {
        while (true) {
            resource.consume();
            try { 
                Thread.sleep(1500);
            } catch (InterruptedException e) {}
        }
    }
}

public class ProducerConsumer {
    public static void main(String[] args) {
        SharedResource resource = new SharedResource();
        new Producer(resource).start();
        new Consumer(resource).start();
    }
}
