#include <stdio.h>
#include <stdbool.h>

#define N 4  // You can change this to any N

int solutionCount = 0;

// Function to print one solution
void printSolution(int board[N][N]) {
    printf("Solution %d:\n", ++solutionCount);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%s ", board[i][j] ? "Q" : ".");
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check this row on left
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Recursive function to solve the problem and print all solutions
void solveNQUtil(int board[N][N], int col) {
    if (col >= N) {
        printSolution(board);
        return;
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;  // Place queen

            solveNQUtil(board, col + 1);  // Recur

            board[i][col] = 0;  // Backtrack
        }
    }
}

// Main function
int main() {
    int board[N][N] = {0};

    printf("Input: Enter number of queens: %d\n\n", N);
    solveNQUtil(board, 0);

    if (solutionCount == 0)
        printf("No solution exists.\n");
    else
        printf("Total solutions: %d\n", solutionCount);

    return 0;
}
